{"version":3,"sources":["Loader.jsx","wapFunctions.js","Wap.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","className","src","alt","Axios","axios","create","withCredentials","query","id","a","async","get","wrapChildlessElements","cmpData","role","children","htmlTagName","prefs","renderSingleCmp","React","createElement","key","submitForm","formData","siteId","post","Website","state","wapData","loadWebsite","props","match","params","result","setState","data","document","title","settings","name","renderCmpsRecursive","cmps","onSubmit","onSubmitForm","_id","Array","isArray","map","child","cmpId","undefined","ev","preventDefault","target","querySelectorAll","forEach","elSpan","elInput","value","console","log","this","Component","history","createBrowserHistory","Boolean","window","location","hostname","ReactDOM","render","path","component","Wap","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAEe,SAASA,IACpB,OAAO,yBAAKC,UAAU,kBAAiB,yBAAKC,IAAI,qBAAqBD,UAAU,SAASE,IAAI,gB,oBCA1FC,E,OAAQC,EAAMC,OAAO,CACvBC,iBAAiB,IAKd,SAAeC,EAAMC,GAArB,SAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACUN,EAAMQ,IAAN,UAHA,WAGA,YAAyBH,KADnC,6EAIA,SAASI,EAAsBC,GACb,SAAjBA,EAAQC,OACRD,EAAQE,SAAW,CAAC,CAChBC,YAAa,OACbF,KAAM,OACNG,MAAO,GACPF,SAAS,YAAKF,EAAQE,aAK3B,SAASG,EAAgBL,GAC5B,OAAOM,IAAMC,cACTP,EAAQG,YADL,aAGCK,IAAK,cACFR,EAAQI,OAEfJ,EAAQE,UAIT,SAAeO,EAAWC,EAAUC,GAApC,SAAAf,EAAAC,OAAA,kEAAAD,EAAA,MACUN,EAAMsB,KAAN,UA7BA,WA6BA,YAA0BD,GAAUD,IAD9C,6E,IC9BcG,E,2MAEjBC,MAAQ,CACJC,QAAS,I,EAObC,YAAc,4BAAApB,EAAAC,OAAA,qDACFF,EAAO,EAAKsB,MAAMC,MAAMC,OAAxBxB,IADE,4CAAAC,EAAA,MAIiBF,EAAMC,IAJvB,OAIEyB,EAJF,OAKF,EAAKC,SAAS,CAAEN,QAASK,EAAOE,OAAQ,WAAQC,SAASC,MAAQJ,EAAOE,KAAKG,SAASC,QALpF,yG,EAWdC,oBAAsB,SAAC3B,GAAa,IACxB4B,EAAS,EAAKd,MAAMC,QAApBa,KAKR,OAHA7B,EADAC,EAAO,eAAQA,IAEM,SAAjBA,EAAQC,OACRD,EAAQI,MAAR,eAAqBJ,EAAQI,MAA7B,CAAoCyB,SAAU,EAAKC,gBAChDxB,IAAMC,cACTP,EAAQG,YADL,aAGCK,IAAKR,EAAQ+B,IACb,YAAa/B,EAAQC,MAClBD,EAAQI,MALZ,CAMCT,GAAIK,EAAQ+B,MAEfC,MAAMC,QAAQjC,EAAQE,UACnBF,EAAQE,SAASgC,KAAI,SAAAC,GAAK,OACtBA,EAAMC,MACF,EAAKT,oBAAoBC,EAAKO,EAAMC,QACnCD,EAAMlC,KAAOI,EAAgB8B,GAASA,UAC7CE,I,EAGdP,aAAe,SAAOQ,GAAP,eAAA1C,EAAAC,OAAA,uDACXyC,EAAGC,iBACC7B,EAAW,GACf4B,EAAGE,OAAOC,iBAAiB,2BAA2BC,SAAQ,SAAAC,GAC1D,IAAMC,EAAUD,EAAOzC,SAAS,GAChCQ,EAASkC,EAAQlB,MAAQkB,EAAQC,MACjCD,EAAQC,MAAQ,MANT,oBAAAjD,EAAA,MASDa,EAAWC,EAAU,EAAKI,MAAMC,QAAQgB,MATvC,uDAWPe,QAAQC,IAAR,MAXO,yD,mFApCPC,KAAK/B,MAAMC,MAAMC,OAAOxB,IAAIqD,KAAKhC,gB,+BAmD/B,IACED,EAAYiC,KAAKlC,MAAjBC,QACR,OAAOA,GAAWA,EAAQa,KACtBoB,KAAKrB,oBAAoBZ,EAAQa,KAAR,cAAgC,kBAAC1C,EAAD,U,GA7DhCoB,IAAM2C,WCCrCC,EAAUC,cCMIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrC,MACvB,2DCbNsC,IAASC,OAAO,mBFID,WACX,OACI,kBAAC,IAAD,CAAQP,QAASA,GACb,kBAAC,IAAD,CAAOQ,KAAK,QAAQC,UAAWC,OEP3B,MAASrC,SAASsC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ecb1587.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Loader() {\r\n    return <div className=\"loader-wrapper\"><img src=\"/images/loader.gif\" className=\"loader\" alt=\"Loading...\" /></div>;\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Axios = axios.create({\r\n    withCredentials: true\r\n});\r\n\r\nconst API_PATH = '/api/wap';\r\n\r\nexport async function query(id) {\r\n    return await Axios.get(`${API_PATH}/${id}`);\r\n}\r\n\r\nexport function wrapChildlessElements(cmpData) {\r\n    if (cmpData.role === 'text') {\r\n        cmpData.children = [{\r\n            htmlTagName: 'span',\r\n            role: 'text',\r\n            prefs: {},\r\n            children: [...cmpData.children]\r\n        }]\r\n    }\r\n}\r\n\r\nexport function renderSingleCmp(cmpData) {\r\n    return React.createElement(\r\n        cmpData.htmlTagName,\r\n        {\r\n            key: 'singleItem',\r\n            ...cmpData.prefs,\r\n        },\r\n        cmpData.children\r\n    );\r\n}\r\n\r\nexport async function submitForm(formData, siteId) {\r\n    return await Axios.post(`${API_PATH}/${siteId}`, formData);\r\n}","import React from 'react';\r\nimport './assets/scss/main.scss';\r\nimport Loader from './Loader';\r\nimport { query, renderSingleCmp, wrapChildlessElements, submitForm } from './wapFunctions';\r\n\r\nexport default class Website extends React.Component {\r\n\r\n    state = {\r\n        wapData: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.match.params.id) this.loadWebsite();\r\n    }\r\n\r\n    loadWebsite = async () => {\r\n        const { id } = this.props.match.params;\r\n        if (id) {\r\n            try {\r\n                let result = await query(id)\r\n                this.setState({ wapData: result.data }, () => { document.title = result.data.settings.name });\r\n            } catch (err) {\r\n            }\r\n        }\r\n    }\r\n\r\n    renderCmpsRecursive = (cmpData) => {\r\n        const { cmps } = this.state.wapData;\r\n        cmpData = { ...cmpData };\r\n        wrapChildlessElements(cmpData);\r\n        if (cmpData.role === 'form')\r\n            cmpData.prefs = { ...cmpData.prefs, onSubmit: this.onSubmitForm }\r\n        return React.createElement(\r\n            cmpData.htmlTagName,\r\n            {\r\n                key: cmpData._id,\r\n                'data-role': cmpData.role,\r\n                ...cmpData.prefs,\r\n                id: cmpData._id\r\n            },\r\n            (Array.isArray(cmpData.children) ?\r\n                cmpData.children.map(child =>\r\n                    child.cmpId ?\r\n                        this.renderCmpsRecursive(cmps[child.cmpId]) :\r\n                        (child.role ? renderSingleCmp(child) : child))\r\n                : undefined)\r\n        );\r\n    }\r\n    onSubmitForm = async (ev) => {\r\n        ev.preventDefault()\r\n        let formData = {}\r\n        ev.target.querySelectorAll('span[data-role=\"input\"]').forEach(elSpan => {\r\n            const elInput = elSpan.children[0]\r\n            formData[elInput.name] = elInput.value\r\n            elInput.value = ''\r\n        })\r\n        try {\r\n            await submitForm(formData, this.state.wapData._id)\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { wapData } = this.state;\r\n        return wapData && wapData.cmps ?\r\n            this.renderCmpsRecursive(wapData.cmps['_rootElement']) : <Loader />;\r\n    }\r\n}","import React from 'react';\n\nimport { Router, Route } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport Wap from './Wap';\n\nconst history = createBrowserHistory();\n\n\nexport default function App() {\n    return (\n        <Router history={history}>\n            <Route path=\"/:id?\" component={Wap} />\n        </Router>)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}